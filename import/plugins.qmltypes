import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Amber.Web.Authorization 1.0'

Module {
    dependencies: ["QtQml 2.0"]
    Component {
        name: "Amber::Web::Authorization::Error"
        exports: ["Amber.Web.Authorization/Error 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Code"
            values: {
                "NoError": 0,
                "InvalidOperationError": 1,
                "InvalidParametersError": 2,
                "StateMismatchError": 3,
                "NetworkError": 4,
                "SslError": 5,
                "HttpError": 6,
                "ParseError": 7,
                "TimedOutError": 8,
                "OtherError": 9
            }
        }
        Property { name: "code"; type: "Code"; isReadonly: true }
        Property { name: "message"; type: "string"; isReadonly: true }
        Property { name: "httpCode"; type: "int"; isReadonly: true }
    }
    Component {
        name: "Amber::Web::Authorization::OAuth1"
        prototype: "QObject"
        exports: ["Amber.Web.Authorization/OAuth1 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FlowType"
            values: {
                "InvalidFlow": 0,
                "OAuth10aFlow": 1
            }
        }
        Property { name: "flowType"; type: "FlowType" }
        Property { name: "userAgent"; type: "string" }
        Property { name: "redirectUri"; type: "string" }
        Property { name: "requestTokenEndpoint"; type: "string" }
        Property { name: "authorizeTokenEndpoint"; type: "string" }
        Property { name: "accessTokenEndpoint"; type: "string" }
        Property { name: "consumerKey"; type: "string" }
        Property { name: "consumerSecret"; type: "string" }
        Property { name: "customParameters"; type: "QVariantMap" }
        Property { name: "error"; type: "Amber::Web::Authorization::Error"; isReadonly: true }
        Signal {
            name: "redirectParseError"
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "receivedTemporaryToken"
            Parameter { name: "oauthToken"; type: "string" }
            Parameter { name: "oauthTokenSecret"; type: "string" }
        }
        Signal {
            name: "receivedAccessToken"
            Parameter { name: "oauthToken"; type: "string" }
            Parameter { name: "oauthTokenSecret"; type: "string" }
        }
        Method { name: "requestTemporaryToken" }
        Method {
            name: "generateAuthorizationUrl"
            type: "QUrl"
            Parameter { name: "oauthToken"; type: "string" }
        }
        Method {
            name: "requestAccessToken"
            Parameter { name: "oauthToken"; type: "string" }
            Parameter { name: "oauthTokenSecret"; type: "string" }
            Parameter { name: "oauthVerifier"; type: "string" }
        }
        Method {
            name: "parseRedirectUri"
            type: "QVariantMap"
            Parameter { name: "redirectUri"; type: "string" }
        }
        Method {
            name: "generateAuthorizationHeader"
            type: "string"
            Parameter { name: "oauthToken"; type: "string" }
            Parameter { name: "oauthTokenSecret"; type: "string" }
            Parameter { name: "httpMethod"; type: "string" }
            Parameter { name: "url"; type: "string" }
        }
    }
    Component {
        name: "Amber::Web::Authorization::OAuth2"
        prototype: "QObject"
        exports: ["Amber.Web.Authorization/OAuth2 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FlowType"
            values: {
                "InvalidFlow": 0,
                "ImplicitFlow": 1,
                "ClientCredentialsFlow": 2,
                "AuthorizationCodeFlow": 3,
                "AuthorizationCodeWithPkceFlow": 4,
                "ResourceOwnerPasswordFlow": 5
            }
        }
        Property { name: "flowType"; type: "FlowType" }
        Property { name: "userAgent"; type: "string" }
        Property { name: "redirectUri"; type: "string" }
        Property { name: "authorizationEndpoint"; type: "string" }
        Property { name: "tokenEndpoint"; type: "string" }
        Property { name: "refreshEndpoint"; type: "string" }
        Property { name: "clientId"; type: "string" }
        Property { name: "clientSecret"; type: "string" }
        Property { name: "scope"; type: "string" }
        Property { name: "state"; type: "string" }
        Property { name: "codeVerifier"; type: "string" }
        Property { name: "codeChallenge"; type: "string"; isReadonly: true }
        Property { name: "codeChallengeMethod"; type: "string"; isReadonly: true }
        Property { name: "customParameters"; type: "QVariantMap" }
        Property { name: "networkAccessManager"; type: "QNetworkAccessManager"; isPointer: true }
        Property { name: "ignorableSslErrors"; type: "QList<QSslError>" }
        Property { name: "error"; type: "Amber::Web::Authorization::Error"; isReadonly: true }
        Signal {
            name: "redirectParseError"
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "sslErrors"
            Parameter { name: "errors"; type: "QList<QSslError>" }
        }
        Signal {
            name: "receivedAccessToken"
            Parameter { name: "token"; type: "QVariantMap" }
        }
        Method { name: "generateAuthorizationUrl"; type: "QUrl" }
        Method {
            name: "requestAccessToken"
            Parameter { name: "code"; type: "string" }
            Parameter { name: "state"; type: "string" }
        }
        Method {
            name: "requestAccessToken"
            Parameter { name: "code"; type: "string" }
        }
        Method { name: "requestAccessToken" }
        Method {
            name: "refreshAccessToken"
            Parameter { name: "refreshToken"; type: "string" }
        }
        Method { name: "abortCurrentRequest"; type: "bool" }
        Method {
            name: "generateScope"
            type: "string"
            Parameter { name: "scopes"; type: "QStringList" }
            Parameter { name: "separator"; type: "string" }
        }
        Method { name: "generateState"; type: "string" }
        Method { name: "generateCodeVerifier"; type: "string" }
        Method {
            name: "parseRedirectUri"
            type: "QVariantMap"
            Parameter { name: "redirectUri"; type: "string" }
        }
        Method {
            name: "setScope"
            Parameter { name: "scopes"; type: "QStringList" }
            Parameter { name: "separator"; type: "string" }
        }
        Method {
            name: "setScope"
            Parameter { name: "scopes"; type: "QStringList" }
        }
    }
    Component {
        name: "Amber::Web::Authorization::RedirectListener"
        prototype: "QObject"
        exports: ["Amber.Web.Authorization/RedirectListener 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "timeout"; type: "int" }
        Property { name: "port"; type: "int" }
        Property { name: "uri"; type: "string"; isReadonly: true }
        Property { name: "httpContent"; type: "string" }
        Signal {
            name: "receivedRedirect"
            Parameter { name: "redirectUri"; type: "string" }
        }
        Signal { name: "timedOut" }
        Signal { name: "failed" }
        Method { name: "startListening" }
        Method { name: "stopListening" }
    }
}
